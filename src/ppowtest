./BaseBinaryStar.cpp:1587: PPOW(q, 1.0 / 3.0)
./BaseBinaryStar.cpp:1707: PPOW(q, 1.0 / 3.0)
./BaseStar.cpp:500: PPOW(10.0, max((0.097 - (0.1072 * (sigma + 3.0))), max(0.097, min(0.1461, (0.1461 + (0.1237 * (sigma + 2.0)))))))
./BaseStar.cpp:503: PPOW(a[29], (a[32]))
./BaseStar.cpp:521: PPOW(a[66], a[61]))
./BaseStar.cpp:538: PPOW(2.0, 1.9)))
./BaseStar.cpp:539: PPOW(a[57], a[56]))))
./BaseStar.cpp:540: PPOW(a[33], a[37])))
./BaseStar.cpp:542: PPOW(a[67], a[61]))
./BaseStar.cpp:543: PPOW(2.0, a[71]))
./BaseStar.cpp:544: PPOW(16.0, a[71]))
./BaseStar.cpp:545: PPOW(2.0, a[41])) - 1.0
./BaseStar.cpp:547: PPOW((1.0 - a[78]), a[79]))
./BaseStar.cpp:603: PPOW(10.0, (-4.6739 - (0.9394 * sigma)))
./BaseStar.cpp:604: PPOW(Z, 2.94))))
./BaseStar.cpp:606: PPOW(10.0, b[3])
./BaseStar.cpp:611: PPOW(b[14], b[15])
./BaseStar.cpp:612: PPOW(b[16], b[15])
./BaseStar.cpp:613: PPOW((xi + 1.0), 2.862149)) : 1.0
./BaseStar.cpp:614: PPOW(b[24], b[28])
./BaseStar.cpp:615: PPOW(Z, -0.3671407))
./BaseStar.cpp:616: PPOW(b[27], (2.0 * b[28]))
./BaseStar.cpp:617: PPOW(b[31], b[33])
./BaseStar.cpp:618: PPOW(b[34], b[33])
./BaseStar.cpp:623: PPOW(b[41], b[42])
./BaseStar.cpp:630: PPOW(Z, 2.83))), b[55])
./BaseStar.cpp:733: PPOW(massCutoffs(MHeF), 3.8))) / (b[13] + (massCutoffs(MHeF) * massCutoffs(MHeF)))
./BaseStar.cpp:734: PPOW(massCutoffs(MHeF), b[10])) - LHeI_MHeF) / LHeI_MHeF
./BaseStar.cpp:757: PPOW(massCutoffs(MHeF), b[33]))
./BaseStar.cpp:758: PPOW(massCutoffs(MHeF), b[30])) - LBAGB) / LBAGB
./BaseStar.cpp:784: PPOW(MHeF, b[42]) + b[43] * MHeF_5) / (b[44] + MHeF_5)
./BaseStar.cpp:828: PPOW((p_Metallicity / ZSOL), 0.06)
./BaseStar.cpp:829: PPOW((ZSOL / p_Metallicity), 1.27))
./BaseStar.cpp:959: PPOW((p_Mu), exponent)) / ((1.0 + mu_c_3))
./BaseStar.cpp:991:	return 1600.0 * PPOW(0.00125, -alpha) * PPOW(p_Radius, alpha)
./BaseStar.cpp:1082: PPOW(10.0, CalculateLogBindingEnergyLoveridge(p_IsMassLoss))
./BaseStar.cpp:1250: PPOW(p_Mass, b[30])) / (1.0 + (m_Alpha3 * exp(15.0 * (p_Mass - massCutoffs(MHeF)))))
./BaseStar.cpp:1251: PPOW(p_Mass, b[33]))
./BaseStar.cpp:1271: PPOW(p_CoreMass, gbParams(p))))
./BaseStar.cpp:1422: PPOW(10.0, (logP0))
./BaseStar.cpp:1424: PPOW(10.0, (logMdot_VW))
./BaseStar.cpp:1461: PPOW(m_Mass, 0.16)
./BaseStar.cpp:1518: PPOW((p_HD_limit_factor - 1.0), 3.0) * ((m_Luminosity / 6.0E5) - 1.0)
./BaseStar.cpp:1554: PPOW(m_Luminosity, 1.5) * (1.0 - p_Mu) * 1.0E-13
./BaseStar.cpp:1579: PPOW(m_Metallicity / ZSOL, 0.86) * (1.0 - p_Mu)
./BaseStar.cpp:1626: PPOW(10.0, logMdotOB)
./BaseStar.cpp:1642: PPOW(10.0, logMdotOB)
./BaseStar.cpp:1868: PPOW((p_Luminosity / gbParams(B)), (1.0 / gbParams(q)))
./BaseStar.cpp:1869: PPOW((p_Luminosity / gbParams(D)), (1.0 / gbParams(p)))
./BaseStar.cpp:2129: PPOW(p_MZAMS, 3.45))
./BaseStar.cpp:2150: PPOW(p_MZAMS, 3.45))
./BaseStar.cpp:2217: PPOW(mRatio, 0.4)
./BaseStar.cpp:2222: PPOW(mRatio, 0.4)
./BaseStar.cpp:2381:	return 0.4311 * PPOW((m_Mass * rEnv * (m_Radius - (0.5 * rEnv))) / (3.0 * m_Luminosity), 1.0 / 3.0)
./BinaryConstituentStar.cpp:339:		    double	secondOrderTidalCoeff = 1.592E-09 * PPOW(Mass(), 2.84)
./BinaryConstituentStar.cpp:342:		    timescale                     = 1.0 / ((21.0 / 2.0) * freeFallFactor * q2 * PPOW(1.0 + q2, 11.0/6.0) * secondOrderTidalCoeff * rOverAPow21Over2)
./BinaryConstituentStar.cpp:386: PPOW(2.0, 5.0 / 3.0)
./BinaryConstituentStar.cpp:387: PPOW(Mass(), 2.84)
./BinaryConstituentStar.cpp:392:		    timescale              = 1.0 / (coeff2 * freeFallFactor * gyrationRadiusSquared_1 * q2 * q2 * PPOW(1.0 + q2, 5.0 / 6.0) * e2 * PPOW(rOverA, 17.0 / 2.0))
./BinaryConstituentStar.cpp:396: PPOW(Luminosity() / Mass(), 5.0 / 7.0) * rOverA_6)
./CHeB.cpp:97:	double lambda2 = 0.42 * PPOW(m_RZAMS / m_Radius, 0.4)
./CHeB.cpp:487: PPOW(p_MFGB, (b[15] + 0.1))))
./CHeB.cpp:489: PPOW(p_Mass, b[15])))
./CHeB.cpp:552: PPOW(((ty - tx) / (1.0 - tx)), epsilon)
./CHeB.cpp:553: PPOW(CalculateLuminosityAtBAGB(p_Mass) / Lx, lambda)
./CHeB.cpp:559: PPOW(GiantBranch::CalculateLuminosityAtHeIgnition_Static(p_Mass, m_Alpha1, massCutoffs(MHeF), m_BnCoefficients) / Lx, lambdaPrime)
./CHeB.cpp:595: PPOW((p_Tau - tx) / (1.0 - tx), epsilon)
./CHeB.cpp:596: PPOW(LBAGB / Lx, lambda)
./CHeB.cpp:602: PPOW((LHeI / Lx), lambdaPrime)
./CHeB.cpp:678: PPOW(p_Mass, b[28])
./CHeB.cpp:679: PPOW((b[25] * p_Mass), b[26]) * m_b28)) / (b[27] + m_b28)
./CHeB.cpp:685: PPOW(p_MHeF, b[28])
./CHeB.cpp:686: PPOW((b[25] * p_MHeF), b[26]) * MHeF_b28)) / (b[27] + MHeF_b28)
./CHeB.cpp:689: PPOW(top / bottom, mu)
./CHeB.cpp:781: PPOW(log((Ry / Rmin)), 1.0 / 3.0)
./CHeB.cpp:783: PPOW(log((Rx / Rmin)), 1.0 / 3.0)
./CHeB.cpp:927: PPOW((1.0 - mu), b[40]))) * (1.0 + (m_Alpha4 * exp(15.0 * (p_Mass - massCutoffs(MHeF)))))
./CHeB.cpp:932: PPOW(p_Mass, b[42])) + (b[43] * m_5)) / (b[44] + m_5))
./CHeB.cpp:959: PPOW(p_Mass, b[28])
./CHeB.cpp:960: PPOW((b[25] * p_Mass), b[26]) * m_b28)) / (b[27] + m_b28)
./CHeB.cpp:972: PPOW(brackets, b[49])
./CHeB.cpp:1001: PPOW(m_MFGB, 0.414))
./CHeB.cpp:1002: PPOW((log10(m_MFGB) / log10(massCutoffs(MHeF) / massCutoffs(MFGB))), b[46]))
./EAGB.cpp:40: PPOW((gbParams(D) / LBAGB), p1_p))
./EAGB.cpp:41: PPOW((LBAGB / gbParams(Lx)), p1_p))
./EAGB.cpp:42: PPOW((gbParams(B) / gbParams(Lx)), q1_q))
./EAGB.cpp:480: PPOW(p_Mass, -b[54])))
./EAGB.cpp:493: PPOW(x2, -b[54])))
./EAGB.cpp:506: PPOW(p_Luminosity, b50)))
./EAGB.cpp:555: PPOW((gbParams(p) - 1.0) * gbParams(AHe) * gbParams(D) * (timescales(tinf1_FAGB) - p_Time), 1.0 / (1.0 - gbParams(p)))
./EAGB.cpp:556: PPOW((gbParams(q) - 1.0) * gbParams(AHe) * gbParams(B) * (timescales(tinf2_FAGB) - p_Time), 1.0 / (1.0 - gbParams(q)))
./EAGB.cpp:630: PPOW((gbParams(D) / LDU), (p1 / gbParams(p)))
./EAGB.cpp:631: PPOW((gbParams(B) / LDU), (q1 / gbParams(q)))
./EAGB.cpp:717: PPOW((gbParams(D) / LTHe), p1_p))
./EAGB.cpp:718: PPOW((LTHe / gbParams(Lx)), p1_p)
./EAGB.cpp:719: PPOW((gbParams(B) / gbParams(Lx)), q1_q))
./FGB.cpp:42: PPOW(((p - 1.0) * AH * D * (timescales(tinf1_FGB) - p_Time)), (1.0 / (1.0 - p)))
./FGB.cpp:43: PPOW(((q - 1.0) * AH * B * (timescales(tinf2_FGB) - p_Time)), (1.0 / (1.0 - q)))
./FGB.cpp:45: PPOW(coreMass, p)))
./FGB.cpp:77: PPOW(((gbParams(p) - 1.0) * gbParams(AH) * gbParams(D) * (timescales(tinf1_FGB) - p_Time)), (1.0 / (1.0 - gbParams(p))))
./FGB.cpp:78: PPOW(((gbParams(q) - 1.0) * gbParams(AH) * gbParams(B) * (timescales(tinf2_FGB) - p_Time)), (1.0 / (1.0 - gbParams(q))))
./GiantBranch.cpp:27: PPOW(10.0, std::max(-4.8, std::min((-5.7 + (0.8 * p_Mass)), (-4.1 + (0.14 * p_Mass)))))
./GiantBranch.cpp:66: PPOW((gbParams(D) / LBGB), p1_p))
./GiantBranch.cpp:67: PPOW((LBGB / gbParams(Lx)), p1_p))
./GiantBranch.cpp:68: PPOW((gbParams(B) / gbParams(Lx)), q1_q))
./GiantBranch.cpp:90: PPOW(p_Mass, 0.6))))

./GiantBranch.cpp:126: PPOW(10.0, logD)
./GiantBranch.cpp:216: PPOW((gbParams(B) / gbParams(D)), (1.0 / (gbParams(p) - gbParams(q))))
./GiantBranch.cpp:237: PPOW(gbParams(Mx), gbParams(p))))
./GiantBranch.cpp:361: PPOW((m_Luminosity / L0), kappa))))
./GiantBranch.cpp:394: PPOW((m_Luminosity / Lc), s)
./GiantBranch.cpp:395: PPOW((m_Radius / Rc), r)
./GiantBranch.cpp:428: PPOW(p_Mass, C_COEFF.at(2)))
./GiantBranch.cpp:429: PPOW(p_Mass, a[32])
./GiantBranch.cpp:477: PPOW(mu, 1.6479)))
./GiantBranch.cpp:478: PPOW(mu, b[19])) / (1.0 + alpha2 * exp(15.0 * (p_Mass - p_MHeF)))
./GiantBranch.cpp:512: PPOW(p_Mass, b[10])) / (1.0 + (p_Alpha1 * exp(15.0 * (p_Mass - p_MHeF))))
./GiantBranch.cpp:513: PPOW(p_Mass, 3.8))) / (b[13] + (p_Mass * p_Mass))
./GiantBranch.cpp:566: PPOW(p_Mass, -b[7])))
./GiantBranch.cpp:568: PPOW(p_Luminosity, b[3])))
./GiantBranch.cpp:613: PPOW(mu, b[23]))
./GiantBranch.cpp:650: PPOW((RGB_LHeI / RmHe), mu)
./GiantBranch.cpp:723: PPOW()
./GiantBranch.cpp:746: PPOW()
./GiantBranch.cpp:772: PPOW(massCutoffs(MHeF), MC_L_C2))
./GiantBranch.cpp:774: PPOW()
./GiantBranch.cpp:808: PPOW(massCutoffs(MHeF), MC_L_C2))
./GiantBranch.cpp:810: PPOW()
./GiantBranch.cpp:861: PPOW(massCutoffs(MHeF), MC_L_C2))
./GiantBranch.cpp:863: PPOW()
./GiantBranch.cpp:978: PPOW((gbParams(D) / LHeI), (p1 / gbParams(p)))
./GiantBranch.cpp:979: PPOW((gbParams(B) / LHeI), (q1 / gbParams(q)))
./GiantBranch.cpp:1118: PPOW(10.0, logRemnantMass), m_SupernovaDetails.HeCoreMassAtCOFormation)
./HeGB.cpp:54: PPOW((p_Luminosity / LTHe), 0.2) + (0.02 * (exp(p_Luminosity / lamda) - exp(LTHe / lamda)))
./HeGB.cpp:55: PPOW(p_Luminosity, 0.75)
./HeGB.cpp:153: PPOW(gbParams(D) / LtHe, p1_p))
./HeGB.cpp:157: PPOW(LtHe / gbParams(Lx), p1_p))
./HeGB.cpp:158: PPOW(gbParams(B) / gbParams(Lx), q1 / gbParams(q)))
./HeGB.cpp:160: PPOW(p_CoreMass, 1.0 - gbParams(q)) / (q1 * gbParams(AHe) * gbParams(B)))
./HeGB.cpp:163: PPOW(p_CoreMass, 1.0 - gbParams(p)) / (p1 * gbParams(AHe) * gbParams(D)))
./HeGB.cpp:205: PPOW(gbParams(D) / LtHe, p1_p))
./HeGB.cpp:206: PPOW((LtHe / gbParams(Lx)), p1_p)
./HeGB.cpp:210: PPOW(gbParams(B) / gbParams(Lx), q1 / gbParams(q)))
./HeGB.cpp:211: PPOW(q1 * gbParams(AHe) * gbParams(B) * (tinf2 - p_Time), 1.0 / (1.0 - gbParams(q)))
./HeGB.cpp:214: PPOW(p1 * gbParams(AHe) * gbParams(D) * (tinf1 - p_Time), 1.0 / (1.0 - gbParams(p)))
./HeHG.cpp:34: PPOW((gbParams(D) / LTHe), p1_p))
./HeHG.cpp:35: PPOW((LTHe / gbParams(Lx)), p1_p)
./HeHG.cpp:36: PPOW((gbParams(B) / gbParams(Lx)), q1_q))
./HeHG.cpp:304:	double rMinLambda = 0.3 * PPOW(rMin, -0.8)
./HeHG.cpp:305:	double rMaxLambda = 0.3 * PPOW(rMax, -0.8)
./HeHG.cpp:307:	return m_Radius < rMin ? rMinLambda : PPOW(m_Radius, -0.8))
./HeMS.cpp:129: PPOW(p_Mass, 4.6)) / (m_4 + (0.162 * m_3) + 0.0065)
./HG.cpp:57:	double lambda1 = std::min(0.80, (3.0 / (2.4 + PPOW(m_Mass,-3.0 / 2.0))) - (0.15 * log10(m_Luminosity)))
./HG.cpp:58:	double lambda2 = 0.42 * PPOW(m_RZAMS / m_Radius, 0.4)
./HG.cpp:446: PPOW((LEHG / LTMS), tau)
./HG.cpp:499: PPOW((REHG / RTMS), p_Tau)
./HG.cpp:520: PPOW(m_Tau, 1.0 / 2.0) * (m_Radius - clone.Radius())
./MainSequence.cpp:66: PPOW((top / bottom), 0.4)
./MainSequence.cpp:69: PPOW(p_Mass, a[37])))
./MainSequence.cpp:93: PPOW(p_Mass, a[56]))))
./MainSequence.cpp:131: PPOW(p_Mass, 1.9)))
./MainSequence.cpp:185: PPOW(p_Mass - a[78], a[79]))
./MainSequence.cpp:186: PPOW((p_Mass - 1.0) / (a[75] - 1.0), a[81])
./MainSequence.cpp:217: PPOW(p_Mass, (a[16] + 1.8)))
./MainSequence.cpp:218: PPOW(p_Mass, a[16])
./MainSequence.cpp:251: PPOW(p_Mass, a[10])))))))
./MainSequence.cpp:259: PPOW(tau, eta)
./MainSequence.cpp:263: PPOW(10.0, logLMS_LZAMS)
./MainSequence.cpp:296: PPOW(p_Mass, a[61]))
./MainSequence.cpp:324: PPOW(p_Mass, a[71]))
./MainSequence.cpp:351: PPOW(((p_Mass - massCutoffs(MHook)) / (a[42] - massCutoffs(MHook))), 0.5)
./MainSequence.cpp:352: PPOW(((p_Mass - a[42]) / (2.0 - a[42])), a[44]))
./MainSequence.cpp:356: PPOW(p_Mass, a[41])
./MainSequence.cpp:386: PPOW(p_Mass, a[22]))
./MainSequence.cpp:397: PPOW(p_Mass, a[26] + 1.5))) / (a[25] + m_5)
./MainSequence.cpp:405: PPOW(mAsterisk, a[26] + 1.5))) / (a[25] + mA_5)
./MainSequence.cpp:406: PPOW(a[17], a[22]))
./MainSequence.cpp:445: PPOW(p_Mass, a[10])))))))
./MainSequence.cpp:464: PPOW(10.0, logRMS_RZAMS)
./MainSequence.cpp:486: PPOW(1.0 - m_Tau, 1.0 / 4.0) : 0.0
./MainSequence.cpp:533: PPOW(p_Mass, a[10])))))))
./MainSequence.cpp:606:	return ((k0 - 0.025) * PPOW(radiusRatio, CUpper)) + (0.025 * PPOW(radiusRatio, -0.1))
./NS.cpp:197: PPOW(10.0, OPTIONS->PulsarBirthMagneticFieldDistributionMax())
./NS.cpp:198: PPOW(10.0, OPTIONS->PulsarBirthMagneticFieldDistributionMin())
./NS.cpp:294: PPOW(10.0, CalculatePulsarBirthMagneticField_Static()) * GAUSS_TO_TESLA 
./NS.cpp:343: PPOW(10.0, OPTIONS->PulsarLog10MinimumMagneticField()) * GAUSS_TO_TESLA
./NS.cpp:374: PPOW(p, 2.0 / 7.0)
./NS.cpp:375: PPOW((2.0 * M_PI * M_PI) / (G * MU_0 * MU_0), 1.0 / 7.0)
./NS.cpp:376: PPOW(m_PulsarDetails.magneticField, 4.0 / 7.0)
./profiling.h:28:#define PPOW(base, exponent)        profiling::pow(base, exponent, __PRETTY_FUNCTION__)             // yes
./profiling.h:30:#define PPOW(base, exponent)        profiling::pow(base, exponent)                                  // no
./profiling.h:70:#define PPOW(base, exponent)        std::pow(base, exponent)                                        // not profiling calls to pow()
./TPAGB.cpp:46: PPOW((gbParams(B) / LDU), q1_q))
./TPAGB.cpp:49: PPOW((gbParams(D) / LDU), p1_p))
./TPAGB.cpp:50: PPOW((LDU / gbParams(Lx)), p1_p))
./TPAGB.cpp:51: PPOW((gbParams(B) / gbParams(Lx)), q1_q))
./TPAGB.cpp:85:	double lambda2 = 0.42 * PPOW(m_RZAMS / m_Radius, 0.4)
./TPAGB.cpp:462: PPOW((gbParams(p) - 1.0) * gbParams(AHHe) * gbParams(D) * (timescales(tinf1_SAGB) - p_Time), 1.0 / (1.0 - gbParams(p)))
./TPAGB.cpp:463: PPOW((gbParams(q) - 1.0) * gbParams(AHHe) * gbParams(B) * (timescales(tinf2_SAGB) - p_Time), 1.0 / (1.0 - gbParams(q)))
./utils.cpp:43: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:44: PPOW(p_Max, KROUPA_POWER_PLUS1_2) - KROUPA_BREAK_1_PLUS1_2)
./utils.cpp:50: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:53: PPOW(p_Min, KROUPA_POWER_PLUS1_1)) +
./utils.cpp:54: PPOW(p_Mass, KROUPA_POWER_PLUS1_2) - KROUPA_BREAK_1_PLUS1_2)
./utils.cpp:60: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:62: PPOW(p_Max, KROUPA_POWER_PLUS1_3) - KROUPA_BREAK_2_PLUS1_3)
./utils.cpp:69: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:72: PPOW(p_Min, KROUPA_POWER_PLUS1_1)) +
./utils.cpp:73: PPOW(p_Mass, KROUPA_POWER_PLUS1_2) - KROUPA_BREAK_1_PLUS1_2)
./utils.cpp:76: PPOW(p_Min, KROUPA_POWER_PLUS1_1)) +
./utils.cpp:78: PPOW(p_Mass, KROUPA_POWER_PLUS1_3) - KROUPA_BREAK_2_PLUS1_3)
./utils.cpp:85: PPOW(p_Min, KROUPA_POWER_PLUS1_2))
./utils.cpp:86: PPOW(p_Max, KROUPA_POWER_PLUS1_3) - KROUPA_BREAK_2_PLUS1_3)
./utils.cpp:92: PPOW(p_Min, KROUPA_POWER_PLUS1_2))
./utils.cpp:95: PPOW(p_Min, KROUPA_POWER_PLUS1_2)) +
./utils.cpp:96: PPOW(p_Mass, KROUPA_POWER_PLUS1_3) - KROUPA_BREAK_2_PLUS1_3)
./utils.cpp:175: PPOW(a_cubed_SI, 1.0 / 3.0)
./utils.cpp:355: PPOW(p_Xmin, powerPlus1)
./utils.cpp:357: PPOW(p_Xmax, powerPlus1) - min_powerPlus1) + min_powerPlus1), 1.0 / powerPlus1)
./utils.cpp:982: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:983: PPOW(p_Max, KROUPA_POWER_PLUS1_2) - KROUPA_BREAK_1_PLUS1_2)
./utils.cpp:987: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:991: PPOW(p_Min, KROUPA_POWER_PLUS1_1), ONE_OVER_KROUPA_POWER_1_PLUS1)
./utils.cpp:992: PPOW((rand - A) * (KROUPA_POWER_PLUS1_2 / C2) + KROUPA_BREAK_1_PLUS1_2, ONE_OVER_KROUPA_POWER_2_PLUS1)
./utils.cpp:996: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:998: PPOW(p_Max, KROUPA_POWER_PLUS1_3) - KROUPA_BREAK_2_PLUS1_3)
./utils.cpp:1004: PPOW(p_Min, KROUPA_POWER_PLUS1_1))
./utils.cpp:1010: PPOW(p_Min, KROUPA_POWER_PLUS1_1), ONE_OVER_KROUPA_POWER_1_PLUS1)
./utils.cpp:1012: PPOW((rand - A) * (KROUPA_POWER_PLUS1_2 / C2) + KROUPA_BREAK_1_PLUS1_2, ONE_OVER_KROUPA_POWER_2_PLUS1)
./utils.cpp:1014: PPOW((rand - A - B) * (KROUPA_POWER_PLUS1_3 / C3) + KROUPA_BREAK_2_PLUS1_3, ONE_OVER_KROUPA_POWER_3_PLUS1)
./utils.cpp:1019: PPOW(p_Min, KROUPA_POWER_PLUS1_2))
./utils.cpp:1020: PPOW(p_Max, KROUPA_POWER_PLUS1_3) - KROUPA_BREAK_2_PLUS1_3)
./utils.cpp:1024: PPOW(p_Min, KROUPA_POWER_PLUS1_2))
./utils.cpp:1029: PPOW(p_Min, KROUPA_POWER_PLUS1_2), ONE_OVER_KROUPA_POWER_2_PLUS1)
./utils.cpp:1030: PPOW((rand - B) * (KROUPA_POWER_PLUS1_3 / C3) + KROUPA_BREAK_2_PLUS1_3, ONE_OVER_KROUPA_POWER_3_PLUS1)
./utils.cpp:1110: PPOW(10, (logMin + ((logMax - logMin) * RAND->Random())))
./utils.cpp:1205: PPOW(10.0, 2.3 * sqrt(-2.0 * log(RAND->Random())) * cos(2.0 * M_PI * RAND->Random()) + 4.8)
./WhiteDwarfs.cpp:18: PPOW(p_BaryonNumber * (p_Time + 0.1), 1.4)
./WhiteDwarfs.cpp:34: PPOW(p_Mass / MCH, 2.0 / 3.0)))
